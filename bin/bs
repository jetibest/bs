#!/usr/bin/env node

// TODO: Implement WebRTC support for P2P connections.

const fs = require('fs');

const BUFFERED_SOCKET_SERVER_HELP = [
		/*******************************************************************************/
		'COMMANDS',
		'',
		' help,h',
		'   Show this help.',
		'',
		' exit,quit,q',
		'   Close connection.',
		'',
		' list',
		'   List targets, columns:',
		'   <target name>',
		'',
		'   Note: Columns separated by whitespaces.',
		'',
		' list <target>',
		'   List files for target, columns:',
		'   <filename> <filesize>',
		'',
		'   Note: Size of file is in bytes.',
		'   Note: Columns separated by whitespaces.',
		'',
		' read <target> <filename> [read-offset]',
		'   Read file of a target.',
		'   Optionally starting at read-offset (defaults to 0).',
		'',
		' write <target> [filename]',
		'   Append to file of a target.',
		'   Creates file if not exists.',
		'',
		' open <target> <filename> [read-offset]',
		'   Executes both read and write commands.',
		'',
		''
	].join('\n') + '\n';

const BUFFERED_SOCKET_CLI_HELP = [
		/*******************************************************************************/
		'USAGE',
		' bs [OPTIONS] <CMD [OPTIONS...]>...',
		'',
		'',
		'COMMANDS',
		' listen [OPTIONS] <address>   Run server at given address. Defaults to ',
		'                              0.0.0.0:6273',
		' connect [OPTIONS] <address>  Connect to server at given address. Defaults to',
		'                              localhost:6273',
		'',
		'',
		'OPTIONS',
		'',
		'Note: Some options may also be separately used for individual commands.',
		'',
		' --help, -h, help        Show this help',
		' --key <file>            Private RSA-key for client/server',
		' --cert <file>           Certificate for server',
		' --tls                   Use TLS. Overrides protocol.',
		' --no-tls                Do not use TLS (no secure line). Overrides protocol.',
		'',
		'',
		'LISTEN OPTIONS',
		'',
		' --store <dir>           Directory to store data',
		' --unix,-U               Use UNIX domain socket',
		'',
		'',
		'CONNECT OPTIONS',
		'',
		' --ignore-cert           Always accept remote certificate, for testing only',
		'',
		'',
		'EXAMPLES',
		'',
		'Note: For convenience, capitalized names indicate the hash of the client\'s respective',
		'public key.',
		'',
		' 1. Alice and Bob say hello to each other using Charles\' server.',
		'',
		'   charles.net> bs listen 0.0.0.0',
		'',
		'   alice.net> bs connect charles.net',
		'   << hash ALICE',
		'   >> open BOB hello',
		'   >> Hello Bob, it is I, Alice!',
		'   << Hi Alice, how are you?',
		'   <> ...',
		'',
		'   bob.net> bs connect charles.net',
		'   << hash BOB',
		'   >> list',
		'   << ALICE',
		'   >> list ALICE',
		'   << hello    27   1970-01-01T12:34:56',
		'   >> open ALICE hello',
		'   << Hello Bob, it is I, Alice!',
		'   >> Hi Alice, how are you?',
		'   <> ...',
		'',
		' 2. Alice and Bob say hello to each other using Alice\'s device.',
		'',
		'   alice.net> bs listen 0.0.0.0 connect localhost',
		'   << hash ALICE',
		'   >> open BOB hello',
		'   << Hello Bob, it is I, Alice!',
		'   << Hi Alice, how are you?',
		'   <> ...',
		'',
		'   bob.net> bs connect alice.net',
		'   << hash BOB',
		'   >> list',
		'   << ALICE',
		'   >> list ALICE',
		'   << hello    27   1970-01-02T12:34:56',
		'   >> open ALICE hello',
		'   << Hello Bob, it is I, Alice!',
		'   >> Hi Alice, how are you?',
		'   <> ...',
		'',
		' 3. Alice sends a file to Bob. Bob checks for messages, Bob views the file.',
		'',
		'   charles.net> bs listen 0.0.0.0',
		'',
		'   alice.net> cat flowers.jpg | bs connect charles.net write BOB suprise.jpg',
		'',
		'   bob.net> bs connect charles.net',
		'   << hash BOB',
		'   >> list',
		'   << ALICE',
		'   >> list ALICE',
		'   << surprise.jpg   123456   1970-01-03T12:34:56',
		'   bob.net> bs connect charles.net read ALICE surprise.jpg | imageviewer',
		'',
		'Note: Of course, charles.net can usually not be trusted. Therefore, any implementation',
		'of a higher level protocol should include an appropriate security layer.',
		'',
		''
	].join('\n') + '\n';

function parse_address(addr_str)
{
	var addr = {
		protocol: '',
		hostname: '',
		port: 0
	};
	addr_str = addr_str.replace(/^([a-z0-9]+):[/][/]/g, ($0, $1) => {addr.protocol = $1;return '';});
	addr_str = addr_str.replace(/(^|:)([0-9]+)$/g, ($0, $1, $2) => {addr.port = $2;return '';});
	addr.hostname = addr_str;
	return addr;
}

const opts = {
	listen: false,
	listenSecure: null,
	listenUnixDomainSocket: null,
	listenProtocol: 'https',
	listenHostname: '0.0.0.0',
	listenPort: 6273,
	listenKey: null,
	listenCert: null,
	listenStorePath: 'cache',
	connect: false,
	connectSecure: null,
	connectRejectUnauthorized: true,
	connectUnixDomainSocket: null,
	connectProtocol: 'bss',
	connectHostname: 'localhost',
	connectPort: 6273,
	connectServername: null,
	connectKey: null
};
{
	var args_scope = null;
	var args_skip = false;
	var args = process.argv.slice(2);
	var i;
	for(i=0;i<args.length;++i)
	{
		var arg = args[i];
		
		if(arg === '--')
		{
			args_skip = true;
			continue;
		}
		if(!args_skip)
		{
			if(arg === 'listen')
			{
				args_scope = 'listen';
				opts.listen = true;
				continue;
			}
			if(arg === 'connect')
			{
				args_scope = 'connect';
				opts.connect = true;
				continue;
			}
			if(arg === '-h' || arg === '--help' || arg === 'help')
			{
				process.stdout.write(BUFFERED_SOCKET_CLI_HELP);
				process.exit(0);
			}
			if(arg === '--tls')
			{
				if(args_scope === null || args_scope === 'listen')
				{
					opts.listenSecure = true;
				}
				if(args_scope === null || args_scope === 'connect')
				{
					opts.connectSecure = true;
				}
				continue;
			}
			if(arg === '--no-tls')
			{
				if(args_scope === null || args_scope === 'listen')
				{
					opts.listenSecure = false;
				}
				if(args_scope === null || args_scope === 'connect')
				{
					opts.connectSecure = false;
				}
				continue;
			}
			if(arg === '--ignore-cert')
			{
				if(args_scope === null || args_scope === 'connect')
				{
					opts.connectRejectUnauthorized = false;
				}
				continue;
			}
			if(arg === '--key')
			{
				var key = fs.readFileSync(args[++i]);
				if(args_scope === null || args_scope === 'listen')
				{
					opts.listenKey = key;
				}
				if(args_scope === null || args_scope === 'connect')
				{
					opts.connectKey = key;
				}
				continue;
			}
			if(arg === '--cert')
			{
				var cert = fs.readFileSync(args[++i]);
				if(args_scope === null || args_scope === 'listen')
				{
					opts.listenCert = cert;
				}
				continue;
			}
			if(arg === '--servername')
			{
				var servername = args[++i];
				if(args_scope === null || args_scope === 'connect')
				{
					// required for SNI with TLSv1.3 when connecting to IP-address or IPC instead of a hostname
					opts.connectServername = servername;
				}
				continue;
			}
			if(arg === '--store')
			{
				var store_path = args[++i];
				if(args_scope === null || args_scope === 'listen')
				{
					opts.listenStorePath = store_path || opts.listenStorePath;
				}
				continue;
			}
		}
		
		if(args_scope === 'listen')
		{
			args_skip = false; // reset flag
			
			var listenAddress = parse_address(arg);
			opts.listenProtocol = listenAddress.protocol || opts.listenProtocol;
			opts.listenHostname = listenAddress.hostname || opts.listenHostname;
			opts.listenPort = parseInt(listenAddress.port) || opts.listenPort;
			
			// determine if secure protocol is enabled:
			if(listenAddress.protocol && opts.listenSecure === null)
			{
				opts.listenSecure = (opts.listenProtocol === 'wss' || opts.listenProtocol === 'https' || opts.listenProtocol === 'bss');
			}
			
			continue;
		}
		if(args_scope === 'connect')
		{
			args_skip = false; // reset flag
			
			// if arg is address, then connect as client to this address
			var addr = parse_address(arg);
			opts.connectProtocol = addr.protocol || opts.connectProtocol;
			opts.connectHostname = addr.hostname || opts.connectHostname;
			opts.connectPort = parseInt(addr.port) || opts.connectPort;
			
			// determine if secure protocol is enabled:
			if(addr.protocol && opts.connectSecure === null)
			{
				opts.connectSecure = (opts.connectProtocol === 'wss' || opts.connectProtocol === 'https' || opts.connectProtocol === 'bss');
			}
			continue;
		}
		
		// end of arguments detected, no argument matched
		console.error('warning: Failed to match argument (' + arg + ').');
	}
	
	// set default
	if(opts.listenSecure === null) opts.listenSecure = true;
	if(opts.connectSecure === null) opts.connectSecure = true;
}

async function listen()
{
	const net = require('net');
	const path = require('path');
	const tls = require('tls');
	const http = require('http');
	const child_process = require('child_process');
	const crypto = require('crypto');
	const webcrypto = crypto.webcrypto || new (require('@peculiar/webcrypto').Crypto)(); // npm install @peculiar/webcrypto
	const subtle = webcrypto.subtle;
	const websocketstream = require('websocket-stream'); // npm install websocket-stream
	const ws = require('ws'); // npm install ws
	
	function ipc_server_onerror(server, sockfile, cb)
	{
		var retryLoop = 0;
		server.on('error', function(err)
		{
			if(err.code === 'EADDRINUSE' && retryLoop++ === 0)
			{
				// check if something is using the socket file
				var test = new net.Socket();
				test.on('error', async function(e)
				{
					if(e.code === 'ECONNREFUSED')
					{
						await fs.promises.unlink(sockfile);
						server.listen(sockfile);
					}
				});
				test.connect({path: sockfile}, function()
				{
					console.error('error: Another instance is already listening (' + sockfile + '). Only one server-instance is allowed to run per working directory.');
					process.exit(1);
				});
				return;
			}
			
			if(typeof cb === 'function') cb(err);
		});
	}
	async function get_store_path(tree, mkdirs)
	{
		var dir = opts.listenStorePath;
		for(var i=0;i<tree.length;++i)
		{
			var item = tree[i];
			if(!item) break;
			dir = path.join(dir, item);
		}
		
		// when targeting a file, ensure directory exists
	    await fs.promises.mkdir(path.dirname(dir), {recursive: true});
		
		return dir;
	}
	function generate_hash(buf)
	{
	    var hash = crypto.createHash('sha256');
	    hash.update(buf);
	    return hash.digest('hex');
	}
	function filter(str)
	{
	    return (str || '').replace(/[^a-z0-9-_]+/g, '');
	}
	async function keep_piping(fh, filename, socket, read_offset)
	{
		const ac = global.AbortController ? new AbortController() : new (require('node-abort-controller').AbortController)();
	    const watcher = await fs.watch(filename, {signal: ac.signal});
	    watcher.on('change', function(event_type, event_filename)
	    {
	        read_next();
	    });
	    watcher.on('error', function(err)
	    {
	        console.error('error: Watcher failed (' + filename + '):', err);
	        socket.destroy();
	    });
	    watcher.on('close', function()
	    {
	        if(socket.readyState === 'open')
	        {
	            // if watcher failed, but socket is still open, then destroy the socket
	            socket.destroy();
	        }
	    });
	    
	    socket.on('close', function()
	    {
	        ac.abort();
	    });
	    
	    // keep own track of position, because we specify a custom read_offset
	    var position = read_offset || 0;
	    
	    async function read_next()
	    {
			var buffer = Buffer.alloc(16384);
	        while(true)
	        {
	            var result = await fh.read(buffer, 0, buffer.length, position || null);
	            
	            // note: we cannot use fifo/named-pipe because fh.read would block, and this cannot be aborted
	            
	            if(result.bytesRead === 0) return;
	            
	            position += result.bytesRead;
	            
	            socket.write(result.buffer.subarray(0, result.bytesRead));
	        }
	    }
	    
	    read_next();
	}
	
	var count = 0;
	const server = net.createServer();
	server.on('connection', async function(socket)
	{
	    var clientPublicKey = null;
	    var clientPublicKeyHash = null;
	    var sessionKey = null;
	    var challengeSuccess = false;
	    
	    var pipe_target = '';
	    var pipe_channel = '';
	    var pipe_read = false;
	    var pipe_write = false;
	    var pipe_read_offset = 0;
		
	    socket.on('error', function(err)
	    {
	        console.error('error: Socket fail:', err);
	    });
	    socket.on('close', function()
	    {
			console.error('BufferedSocket Server: Socket closed.');
			
	        if(pipe_write && typeof pipe_write === 'object')
	        {
	            pipe_write.close();
	        }
	        if(pipe_read && typeof pipe_read === 'object')
	        {
	            // depending on readable stream or filehandle
	            if(pipe_read.destroy)
	            {
	                pipe_read.destroy();
	            }
	            else
	            {
	                pipe_read.close();
	            }
	        }
	    });
	    
	    // furthermore, the client must verify its own public key
	    try
	    {
			var hasEnded = false;
			var isHTTP = false;
	        var rest = null;
	        for await (const buffer of socket)
	        {
				if(hasEnded) break; // stop reading any further data from socket
				if(isHTTP) continue; // don't break, we want to keep the socket open
				
	            if(rest === null)
	            {
	                rest = buffer;
	            }
	            else
	            {
	                rest = Buffer.concat([rest, buffer]);
	            }
	            
	            if(pipe_write)
	            {
	                pipe_write.write(rest);
	                
	                continue;
	            }
	            
	            if(pipe_read) continue; // ignore any further input, but keep socket intact
	            
	            while(rest.length > 0)
	            {
	                var delimiterIndex = rest.indexOf('\n');
	                if(delimiterIndex === -1)
	                {
	                    break;
	                }
	                
	                var line = rest.subarray(0, delimiterIndex).toString('utf8').trim();
	                
					if(opts.listenProtocol === 'http' || opts.listenProtocol === 'https' || opts.listenProtocol === 'ws' || opts.listenProtocol === 'wss')
					{
						if(line.startsWith('GET ') || line.startsWith('POST '))
						{
							// HTTP GET-request possibly with Upgrade header for websockets
							// pass socket to a websocket server
								
							isHTTP = true;
							console.error('BufferedSocket Server: Forwarding HTTP protocol to HTTP Server.');
							var client = net.createConnection('httpserver.sock');
							client.write(rest);
							client.pipe(socket);
							socket.pipe(client);
							break;
						}
					}
					
					// consume line
	                rest = rest.subarray(delimiterIndex + 1);
					
					if(line.startsWith('pubkey '))
					{
						try
						{
							// assuming JWK formatted public key
							clientPublicKey = JSON.parse(line.substring('pubkey '.length).trim());
							
	                    	// create a hash of the public key, for referencing
	                    	// see: https://www.rfc-editor.org/rfc/rfc7638#section-3.5
	                    	clientPublicKeyHash = generate_hash(JSON.stringify({
								e: clientPublicKey.e,
								kty: clientPublicKey.kty,
								n: clientPublicKey.n
							}));
							
							// todo: support for PEM and other formats
	
	                    	socket.write('hash ' + clientPublicKeyHash + '\n');
						}
						catch(err)
						{
							socket.write('warning Parse error for JWK public-key.\n');
						}
					}
					else if(line === 'exit' || line === 'quit' || line === 'q')
					{
						hasEnded = true;
						socket.end('info Goodbye.\n');
						break;
					}
					else if(line === 'help' || line === 'h')
					{
						socket.write(BUFFERED_SOCKET_SERVER_HELP);
						continue;
					}
					
	                // handle commands, the public key is known
	                if(clientPublicKey !== null)
	                {
	                    // now we encrypt random bytes for the client, which must be able to decrypt it, to prove he owns the public key which was provided
	                    if(sessionKey === null)
	                    {
	                        // generate random session key, 64 bytes is a 512-bit key
	                        sessionKey = await new Promise((resolve, reject) => crypto.randomBytes(64, (err, buf) => err ? reject(err) : resolve(buf)));
	                        
							var algorithm_map = {
								'RSA-OAEP-256': {name: 'RSA-OAEP', hash: 'SHA-256'}
							};
							
	                        // encrypt random session key with public key of client
	                        var cryptoClientPublicKey = await subtle.importKey(
								'jwk', // spki
								clientPublicKey, // Buffer.from(clientPublicKey.replace(/---.*?---\r?\n/g, ''), 'base64'),
								algorithm_map[clientPublicKey.alg],
								true,
								['encrypt']
							);
	                        var challengeMessageArrayBuffer = await subtle.encrypt(
								algorithm_map[clientPublicKey.alg],
								cryptoClientPublicKey,
								sessionKey
							);
							// convert arraybuffer to buffer
	                        var challengeMessageBuffer = Buffer.alloc(challengeMessageArrayBuffer.byteLength);
							var view = new Uint8Array(challengeMessageArrayBuffer);
							for(var i=0;i<challengeMessageBuffer.length;++i)
							{
								challengeMessageBuffer[i] = view[i];
							}
							//crypto.publicEncrypt({key: clientPublicKey, oaepHash: 'sha256', padding: crypto.constants.RSA_PKCS1_OAEP_PADDING}, sessionKey);
							
	                        // send ping with base64-encoded challenge
	                        socket.write('ping ' + challengeMessageBuffer.toString('base64') + '\n');
	                    }
	                    else if(!challengeSuccess)
	                    {
	                        // the next line must be a challenge success
	                        if(!line.startsWith('pong '))
	                        {
	                            socket.write('warning Protocol error, input ignored. Please decrypt the Base64-encoded ping-message, reply with a Base64-encoded plaintext pong-message.\n');
	                        }
	                        else
	                        {
	                            var challengeReply = Buffer.from(line.substring('pong '.length), 'base64');
	                            
	                            // use compare instead of equals to not leak info about the length of the session-key (although this is public information anyway)
	                            if(sessionKey.compare(challengeReply) === 0)
	                            {
	                                challengeSuccess = true;
									socket.write('welcome\n'); // confirm authentication of ping challenge
	                            }
	                            else
	                            {
	                                socket.write('warning Decryption error, try again. Pong message does not match encrypted ping message.\n');
	                            }
	                        }
	                    }
	                    else
	                    {
	                        var args = line.split(/\s+/g);
	                        var cmd = args[0];
	                        
	                        // public key is known, and client is proven to be the owner (beware, a middle-man not owning the private key, can still exist, therefore this client-server connection must use a TLS-certificate)
	                        if(cmd === 'list')
	                        {
	                            // list users that put something in our home-directory
	                            if(args.length === 1)
	                            {
	                                try
	                                {
	                                    for(const file of await fs.promises.readdir(await get_store_path([clientPublicKeyHash])))
	                                    {
	                                        // skip hidden files/directories or specials
	                                        if(file.startsWith('.')) continue;
	                                        
	                                        // todo: filter on if it is a directory?
	                                        
	                                        socket.write(file + '\n');
	                                    }
	                                }
	                                catch(err)
	                                {
	                                    if(err.code !== 'ENOENT')
	                                    {
	                                        throw err;
	                                    }
	                                    // else: no output when empty directory
	                                }
									socket.write('\n'); // mark the end of the list
	                            }
	                            // or list for a specific public-key all the files available
	                            else
	                            {
	                                var target = filter(args[1]);
	                            	var dir = await get_store_path([clientPublicKeyHash, target]);
	                                
	                                try
	                                {
	                                    for(const file of await fs.promises.readdir(dir))
	                                    {
	                                        // skip hidden files or specials
	                                        if(file.startsWith('.')) continue;
	                                        
											var file_stat = await fs.promises.stat(path.join(dir, file));
											
	                                        // maybe skip links/directories etc. only named pipes or files should be listed
	                                        socket.write(file + '\t' + file_stat.size + '\t' + file_stat.mtime + '\n');
	                                    }
	                                }
	                                catch(err)
	                                {
	                                    if(err.code !== 'ENOENT')
	                                    {
	                                        throw err;
	                                    }
	                                    // else: no output when empty directory
	                                }
									socket.write('\n'); // mark the end of the list
	                            }
	                        }
	                        else if(cmd === 'read')
	                        {
	                            pipe_target = filter(args[1]);
	                            pipe_channel = filter(args[2] || '');
	                            pipe_read = true;
	                            pipe_read_offset = parseInt(args[3]) || 0;
	                        }
	                        else if(cmd === 'write')
	                        {
	                            pipe_target = filter(args[1]);
	                            pipe_channel = filter(args[2] || '');
	                            pipe_write = true;
	                        }
	                        else if(cmd === 'open')
	                        {
	                            pipe_target = filter(args[1]);
	                            pipe_channel = filter(args[2] || '');
	                            pipe_read = true;
	                            pipe_write = true;
	                            pipe_read_offset = parseInt(args[3]) || 0;
	                        }
	                        else
	                        {
	                            socket.write('warning Invalid command (' + cmd + ')\n');
	                        }
	                        
	                        if(pipe_write)
	                        {
	                            // file is pipe_target/clientpublickey/pipe_channel
	                            
	                            // ensure directory, and get storage path for the given combination of public keys
	                            var file = await get_store_path([pipe_target, clientPublicKeyHash, pipe_channel || 'default'], true);
	                            
	                            // do not use fifo, because then we cannot know in advance how many bytes are ready for us
	                            // and in case of connection errors, we cannot retry reading the data
	                            
	                            // open a write-stream to the file we want to write to
	                            pipe_write = await fs.promises.open(file, 'a');
								console.error('File appending to: ' + file);
	                        }
	                        
	                        if(pipe_read)
	                        {
	                            // write to socket whatever is new in the pipe_target...
	                            // and asynchronously read from the file, and keep file open...
	                            // file is clientpublickey/pipe_target/pipe_channel
	                            var file = await get_store_path([clientPublicKeyHash, pipe_target, pipe_channel || 'default']);
	                            
	                            try
	                            {
	                                // pipe_read = fs.createReadStream(file, {flags: fs.constants.O_RDWR});
	                                pipe_read = await fs.promises.open(file, 'a+');//fs.constants.O_RDWR); // also writing, so that it doesn't block
	                                
	                                keep_piping(pipe_read, file, socket, pipe_read_offset);
	                            }
	                            catch(err)
	                            {
	                                socket.write('error ' + err.code + ' (' + (pipe_channel || 'default') + ').\n');
	                                
	                                pipe_target = '';
	                                pipe_channel = '';
	                                pipe_read = false;
	                                pipe_write = false;
	                                pipe_read_offset = 0;
	                            }
	                        }
	                        
	                        // stop line-by-line reading
	                        break;
	                    }
	                }
	                // error: we first expect the client to provide their public key, before any other communication
	                else
	                {
	                    socket.write('warning Protocol error, input ignored. First provide your public key in JWK-format.\n');
	                }
	            }
	        }
	    }
	    catch(err)
	    {
	        console.error(err);
	        socket.end('error: Server exception.');
	    }
	});
	server.on('listening', function()
	{
	    console.error('BufferedSocket Server: Listening on', server.address());
	});
	if(opts.listenSecure)
	{
		ipc_server_onerror(server, 'bsserver.sock', function(err){throw err;});
		server.listen('bsserver.sock');
	}
	else
	{
		server.on('error', function(err)
		{
		    throw err;
		});
		server.listen({
			host: opts.listenHostname,
			port: opts.listenPort
		});
	}
	
	if(opts.listenProtocol === 'http' || opts.listenProtocol === 'https' || opts.listenProtocol === 'ws' || opts.listenProtocol === 'wss')
	{
		const wss = new ws.WebSocketServer({
			noServer: true
		});
		wss.on('error', function(err)
		{
			throw err;
		});
		wss.on('connection', function(ws)
		{
			ws.on('error', function(err)
			{
				console.error('WebSocket Server: Socket error:', err);
			});
			
			console.error('WebSocket Server: Received connection.');
			
			var stream = websocketstream(ws, {
				perMessageDeflate: false
			});
			var client = net.createConnection(server.address());
			client.pipe(stream);
			stream.pipe(client);
		});
		
		const httpserver = http.createServer();
		httpserver.on('connection', function()
		{
			console.error('HTTP Server: Received connection.');
		});
		httpserver.on('upgrade', function(request, socket, head)
		{
			console.error(request.headers);
			console.error(head);
			if(request.headers['upgrade'] === 'bs')
			{
				var client = net.createConnection(server.address());
				client.pipe(socket);
				socket.pipe(client);
			}
			else
			{
				console.error('HTTP Server: Client requesting upgrade to WebSocket Server.');
				wss.handleUpgrade(request, socket, head, function(ws)
				{
					wss.emit('connection', ws, request);
				});
			}
		});
		httpserver.on('error', function(err)
		{
			throw err;
		});
		httpserver.on('listening', function()
		{
		    console.error('HTTP Server: Listening on', httpserver.address());
		});
		
		ipc_server_onerror(httpserver, 'httpserver.sock', function(err){throw err;});
		httpserver.listen('httpserver.sock');
	}
	
	if(opts.listenSecure)
	{
		// try default file locations for key/cert:
		if(!opts.listenKey && !opts.listenCert)
		{
			opts.listenKey = fs.readFileSync('tls/key.pem');
			opts.listenCert = fs.readFileSync('tls/cert.pem');
		}
		
		// creating a certificate if not exists would need node-forge, let's leave it to OpenSSL instead
		if(!opts.listenKey || !opts.listenCert)
		{
			console.error('TLS Server: Using TLS, but no key and cert specified. Optionally generate with:');
			console.error('TLS Server: > openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem');
		}
		
		const tlsserver = tls.createServer({
			cert: opts.listenCert,
			key: opts.listenKey,
			ALPNProtocols: ['http/1.1']
		});
		tlsserver.on('tlsClientError', function(err){ console.error(err); });
		tlsserver.on('error', function(err){ throw err; });
		tlsserver.on('connection', function()
		{
			// console.error('TLS Server: Received connection.');
		});
		tlsserver.on('secureConnection', function(socket)
		{
			socket.on('error', function(err)
			{
				if(err.code === 'ECONNRESET') return socket.destroy(); // connections by haproxy
				
				console.error('TLS Server: Socket error:', err);
			});
			// console.error('TLS Server: Received secureConnection.');

			// only forward connection when first data is received, to prevent busy connections by haproxy
			var process_data = function(chunk)
			{
				socket.pause();
				socket.off('data', process_data);
				
				var client = net.createConnection(server.address());
				client.write(chunk);
				client.pipe(socket);
				socket.pipe(client);
			};
			socket.on('data', process_data);
		});
		tlsserver.on('listening', function()
		{
			console.error('TLS Server: Listening on', tlsserver.address());
		});
		tlsserver.listen({
			host: opts.listenHostname,
			port: opts.listenPort
		});
	}
}

async function connect()
{
	const net = require('net');
	const tls = require('tls');
	const crypto = require('crypto');
	const ClassCryptoKey = crypto.webcrypto ? crypto.webcrypto.CryptoKey : require('@peculiar/webcrypto').CryptoKey;
	const webcrypto = crypto.webcrypto || new (require('@peculiar/webcrypto').Crypto)(); // npm install @peculiar/webcrypto
	const subtle = webcrypto.subtle;
	
	// grab privateKey from options
	var privateKey = opts.connectKey;
	var publicKey = null;
	
	if(typeof privateKey === 'object' && privateKey !== null && privateKey instanceof Buffer)
	{
		privateKey = privateKey.toString('utf8');
	}
	// import from JSON-string
	if(typeof privateKey === 'string')
	{
		/*if(privateKey.startsWith('-----'))
		{
			privateKey = await subtle.importKey(
				'pkcs8',
				Buffer.from(privateKey, 'utf8').buffer,
				{
					name: 'RSA-OAEP',
					hash: 'SHA-256'
				},
				true,
				['decrypt']
			);
		}
		else*/
		try
		{
			privateKey = await subtle.importKey(
				'jwk',
				JSON.parse(privateKey),
				{
					name: 'RSA-OAEP',
					hash: 'SHA-256'
				},
				true,
				['decrypt']
			);
		}
		catch(err)
		{
			console.error('BufferedSocket Client: Unsupported format. Try JWK.');
		}
	}
	// import from JWK-object
	if(typeof privateKey === 'object' && privateKey !== null && !(privateKey instanceof ClassCryptoKey))
	{
		privateKey = await subtle.importKey(
			'jwk',
			privateKey,
			{
				name: 'RSA-OAEP',
				hash: 'SHA-256'
			},
			true,
			[
				'decrypt'
			]
		);
	}
	// generate private key if not exists
	if(!privateKey)
	{
		console.error('BufferedSocket Client: Generating new keypair...');
		const keyPair = await subtle.generateKey(
			{
				name: 'RSA-OAEP',
				modulusLength: 4096,
				publicExponent: new Uint8Array([1, 0, 1]),
				hash: 'SHA-256'
			},
			true,
			['encrypt', 'decrypt']
		);
		privateKey = keyPair.privateKey;
		publicKey = keyPair.publicKey;
		
		var privateKeyJWK = await subtle.exportKey('jwk', privateKey);
		fs.writeFileSync('key.jwk', JSON.stringify(privateKeyJWK));
		console.error('BufferedSocket Client: Next time, connect with: --key key.jwk');
	}
	// generate public key from private key if not exists
	if(!publicKey)
	{
		// get JWK public key from private key
		const jwk = await subtle.exportKey('jwk', privateKey);
		// delete private part of this key
		delete jwk.d;
		delete jwk.dp;
		delete jwk.dq;
		delete jwk.q;
		delete jwk.qi;
		// set key options
		jwk.key_ops = ['encrypt'];
		// import key from JWK
		publicKey = await subtle.importKey(
			'jwk',
			jwk,
			{
				name: 'RSA-OAEP',
				hash: 'SHA-256'
			},
			true,
			['encrypt']
		);
	}
	
	var publicKeyJWK = await subtle.exportKey('jwk', publicKey);
	
	var hash = '';
	var isConnected = false;
	var hasError = false;
	var queue = Buffer.alloc(0);
	async function process_data(data)
	{
		queue = Buffer.concat([queue, data]);
		
		var lineIndex;
		while((lineIndex = queue.indexOf(10)) !== -1) // 10 == '\n'
		{
			var line = queue.subarray(0, lineIndex).toString('utf8').trim();
			queue = queue.subarray(lineIndex + 1);
			
			var args = line.split(/\s+/g);
			var cmd = args[0];
			if(cmd === 'hash')
			{
				hash = args[1];
				console.error('BufferedSocket Client: Your hash is: ' + hash);
			}
			else if(cmd === 'ping')
			{
				// decrypt challenge, if given, to prove that we own this public key
				if(args[1])
				{
					client.write('pong ' +
						Buffer.from(
							new Uint8Array(
								await subtle.decrypt(
									{name: 'RSA-OAEP'},
									privateKey,
									Buffer.from(args[1], 'base64')
								)
							)
						).toString('base64') +
						'\n');
				}
				else
				{
					client.write('pong\n');
				}
			}
			else if(cmd === 'welcome')
			{
				if(!isConnected)
				{
					isConnected = true;
					client.pause();
					client.off('data', process_data);
					
					// now setup pipe with stdin/stdout for regular commands (list, read, write, open)
					process.stdin.pipe(client);
					client.pipe(process.stdout);
					
					break;
				}
			}
			else
			{
				console.error('BufferedSocket Client: Warning, unknown command received from server (' + line + ').');
			}
		}
	}
	
	console.error('BufferedSocket Client: Connecting...');
	
	var isIPC = false;
	try
	{
		await fs.promises.access(opts.connectHostname);
		isIPC = true;
	}
	catch(ignore) {}
	
	var clientOptions = {};
	if(isIPC)
	{
		clientOptions.path = opts.connectHostname;
	}
	else
	{
		clientOptions.host = opts.connectHostname;
		clientOptions.port = opts.connectPort;
	}
	
	var client = (function()
	{
		if(opts.connectSecure)
		{
			// enables mandatory (since TLSv1.3) SNI request, otherwise this might fail with bad or self-signed certificate
			// the same host may have multiple domain names for which it has a certificate
			// see also: https://github.com/nodejs/node/issues/28167
			// this only makes sense if the servername is not an IP-address, but a hostname
			if(opts.connectServername)
			{
				clientOptions.servername = opts.connectServername;
			}
			else if(!isIPC)
			{
				clientOptions.servername = opts.connectHostname;
			}
			
			clientOptions.rejectUnauthorized = opts.connectRejectUnauthorized;
			console.error('BufferedSocket Client: Connecting via TLS with:', clientOptions);
			return tls.connect(clientOptions);
		}
		else
		{
			console.error('BufferedSocket Client: Connecting with:', clientOptions);
			return net.connect(clientOptions);
		}
	})();
	
	client.on('connect', function()
	{
		console.error('BufferedSocket Client: Connected to', isIPC ? clientOptions.path : (client.remoteAddress + ':' + client.remotePort));
		client.write('pubkey ' + JSON.stringify(publicKeyJWK) + '\n');
	});
	client.on('data', process_data);
	client.on('error', function(err)
	{
		hasError = true;
		console.error(err);
	});
	client.on('close', function()
	{
		if(hasError)
		{
			process.exit(1);
		}
		
		console.error('BufferedSocket Client: Connection closed.');
		process.exit(0);
	});
}


if(opts.listen) listen();
if(opts.connect) connect();

